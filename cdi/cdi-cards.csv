"Compared with EJBs, CDI features a different, more flexible kind of bean. One of the most important differences between the two approaches is that CDI Beans are ___________ that is, they live in a well-defined scope.","contextual"
" Scope for request:  @___________ @Named public class Customer {","RequestScoped"
"_____ beans allow us to easily inject our beans into other classes that depend on them, and to easily refer to them from JSF pages via the Unified Expression Language(EL).","Named"
"The _____________ beans are shared for the length of a single request.This could be an HTTP request, a remote EJB invocation, a web services invocation, or messagedelivery to an MDB. These beans are destroyed at the end of the request.","@RequestScoped"
"The ______________ beans are shared across multiple requests in the same HTTP session but only if there is an active conversation maintained.","@ConversationScoped"
"The ____________ beans are shared between all requests that occur in the same HTTP session and are destroyed when the session is destroyed.","@SessionScoped"
"An _____________ bean will live for as long as the application is running and is destroyed when the application is shut down.","@ApplicationScoped"
"The ___________ beans are never shared between injection points. Any injection of a dependent bean is a new instance whose lifecycle is bound to the lifecycle of the object it is being injected into.","@Dependent"
"In order to enable CDI, the file _________ must be placed:   In your WEB-INF folder if you are developing a web application In your META-INF folder if you are deploying a JAR archive","beans.xml"
"Y/N - You can use both annotations to inject EJBs:   @Inject @EJB","Y"
"@_____ annotation, which is an alias for two commonly used annotations: @Named and @RequestScoped.","Model"
"_________ methods allow control over the production of the dependency objects. As a Java ________ pattern, they can be used as a source of objects whose implementation may vary at runtime, or if the object requires some custom initialization that is not to be performed in the constructor. It can be used to provide any kind of concrete class","Producer,Factory"
"@_____________, just like the name suggests, can be used to observe objects. An observer method is notified whenever an object is created, removed, or updated.","Observes"
"public void  onMemberListChanged (@________(notifyObserver = Reception.IF_EXISTS) final Seat member) {       retrieveAllSeatsOrderedByName(); }","Observes"
"A conditional Observer which is denoted by the expression  notifyObserver = Reception._______ , means that in practice the observer method is only called if an instance of the component already exists,","IF_EXISTS"
"Reception.________ is the default observer for notifyAttribute. If an instance doesn't exist, it will be created.","ALWAYS"
"@Inject _____ seatEvent;","Event"
"seatEvent._____(seat);","fire"
"Y/N - You can declare JSF Managed Beans via an annotation and the scopes are expanded with a view scope and the ability to create custom scopes. However, apart from the view scope, there is very little still going for JSF Managed Beans, which can be replaced by CDI Beans that are much more flexible and allow a better integration with other Java EE components.","Y"
"Y/N - EJBs, even using a less flexible injection mechanism, still maintain some unique features such as schedulable timers, asynchronous operations, declarative transactional execution, and pooling, that are essential for throttling and the prevention of denial of service attacks.","Y"
"A way to properly clean up the EntityManagers at the end of each request by using the annotation @_________.","Disposes"
"For implementing interception in CDI, we need to provide two parts. The first one is obviously the annotation itself. It is meta-annotated as @_________________ which marks it as an annotation that is intended to be used for interceptors","InterceptorBinding"
"The second part is the interceptor implementation itself. This  class  must be annotated as @__________ and additionally with its intended interceptor binding. The interceptor functionality itself is implemented in a  method  which gets annotated as @_______________. The third part is to declared in the beans.xml file in using the   tag.","Interceptor,AroundInvoke,Interceptors"
"___________  are used for  general tasks , which are not related with your class in particular (e.g. auditing). On the other hand,  ___________ , do bear with them the Bean attributes/operations so they can actually specialize or override a specific  business functionality.","Decorators,  Interceptors"
"__________ beans can be used to provide a whole  different bean implementation , while ___________ can be used to further  specialize a single method/attribute  and they allow as well interacting with the method/attribute we are going to specialize.","Alternative,D  ecorators"
"@ _________ 
 public abstract class CoderDecorator implements Coder {  

 
 

   @Inject       @ ________  @Any     Coder coder;  

 
 

  @Override     public String codeString(String s, int tval) {         int len = s.length();          return ""\"""" + s + ""\"" becomes "" + ""\"""" + coder.codeString(s, tval)                  + ""\"", "" + len + "" characters in length"";     }  }","<i>Decorator,</i><i>Delegate</i>"
"The first step in creating a  CDI extension  is to write a class that implements _________. This  marker interface  does not define any methods, but it's needed to satisfy the requirements of Java SE's service provider architecture.","Extension"
"Next, we need to register our extension as a service provider by creating a file named  META-INF/services/javax.enterprise.inject.spi._____________ , which contains the name of our extension class:   org.mydomain.extension.MyExtension","Extension"
"class      MyExtension      implements   __________     {  
      
      void   beforeBeanDiscovery  (  @_________     BeforeBeanDiscovery   bbd  )     {  
         Logger  .  global  .  debug  (  ""beginning the scanning process""  );  
      }  
      
 }","Extension,    Observes"
"Y/N - In fact, the extension can do a lot more than just observe. The extension is permitted to modify the container's metamodel and more.","Y"
"Y/N - In a WAR file the beans.xml needs to be placed inside the META-INF folder.","N"
"Y/N - In a WAR file the beans.xml needs to be placed inside the WEB-INF folder.","Y"
"Using which annotation is possible to provide type-safe injection?","qualifier"
"Y/N - It's possible to use @Produces in a instance variable.



 @Produces 

 @UserDataBase 

 @PersistenceContext(unitName='userDBUnit') 

private EntityManager entityManager;","Y"
"Y/N - It's possible to use qualifiers on events:



 @Inject 

  @Admin  

 private  Event   loggedInEvent; 

 
 

 //Consumer method from another class 

 public void afterLoggedIn( @Observes @Admin   LoggedInEvent event  ) {  

  ....","Y"
"When using the @_________ the managed bean will  not be scanned  by the cdi container. It can only be activated in  beans.xml .","Alternative"
"CDI Interceptors: 

 
 
 First  : Create an annotation class with the @___________ qualifier annotation.   Second  : Use the created annotation aside the @__________ annotation in the class declaration.   Third  : Uses @____________ in the methods that will act as interceptors.   Forth  : Declare in beans.xml with the    tags.   Fifth  : Annotate the target method/class with the annotation created in the first step.","InterceptorBinding,  Interceptor,  AroundInvoke,  interceptors"
"CDI Decorators: 
 
 
 First : Create a new class, can be an abstract one using the @__________ annotation and implementing the interface.  Second : Inject the original object by using @Inject, any qualifier and the @________ annotation.  Third : Declare in the beans.xml file using the   tag.","Decorate,Delegate,decorators"
"CDI Alternativies:  
 
 
 First : Create a new class using the @__________ annotation and implementing the interface. This will not enable the bean to be scanned.  Second : In order to enable the bean, declare in the  beans.xml  file using the   tag.","Alternative,alternativies"
"When you have  multiple annotations  being used in many classes you could create an annotation comprising  all  the annotations:



 @Secure 

 @Transaction 

 @RequestScoped 

 @Named 

 @_________ 

 public  @interface   BusinessComponent  {}","Stereotype"
